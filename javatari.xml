<?xml version="1.0" encoding="UTF-8"?>
<project name="javatari" default="all">
  
  
  <property file="javatari.properties"/>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="700m"/>
  <patternset id="ignored.files">
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/*.rbc/**"/>
    <exclude name="**/*.yarb/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/CVS/**"/>
    <exclude name="**/__pycache__/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/vssver.scc/**"/>
    <exclude name="**/vssver2.scc/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.egg"/>
    <include name="*.jar"/>
    <include name="*.ear"/>
    <include name="*.ane"/>
    <include name="*.klib"/>
    <include name="*.apk"/>
    <include name="*.swc"/>
    <include name="*.war"/>
    <include name="*.zip"/>
  </patternset>
  <patternset id="compiler.resources">
    <exclude name="**/?*.java"/>
    <exclude name="**/?*.form"/>
    <exclude name="**/?*.class"/>
    <exclude name="**/?*.groovy"/>
    <exclude name="**/?*.scala"/>
    <exclude name="**/?*.flex"/>
    <exclude name="**/?*.kt"/>
    <exclude name="**/?*.clj"/>
    <exclude name="**/?*.aj"/>
  </patternset>
  
  <!-- JDK definitions -->
  
  <property name="jdk.bin.jdk_8" value="${jdk.home.jdk_8}/bin"/>
  <path id="jdk.classpath.jdk_8">
    <fileset dir="${jdk.home.jdk_8}">
      <include name="jre/lib/charsets.jar"/>
      <include name="jre/lib/deploy.jar"/>
      <include name="jre/lib/ext/access-bridge-64.jar"/>
      <include name="jre/lib/ext/cldrdata.jar"/>
      <include name="jre/lib/ext/dnsns.jar"/>
      <include name="jre/lib/ext/jaccess.jar"/>
      <include name="jre/lib/ext/jfxrt.jar"/>
      <include name="jre/lib/ext/localedata.jar"/>
      <include name="jre/lib/ext/nashorn.jar"/>
      <include name="jre/lib/ext/sunec.jar"/>
      <include name="jre/lib/ext/sunjce_provider.jar"/>
      <include name="jre/lib/ext/sunmscapi.jar"/>
      <include name="jre/lib/ext/sunpkcs11.jar"/>
      <include name="jre/lib/ext/zipfs.jar"/>
      <include name="jre/lib/javaws.jar"/>
      <include name="jre/lib/jce.jar"/>
      <include name="jre/lib/jfr.jar"/>
      <include name="jre/lib/jfxswt.jar"/>
      <include name="jre/lib/jsse.jar"/>
      <include name="jre/lib/management-agent.jar"/>
      <include name="jre/lib/plugin.jar"/>
      <include name="jre/lib/resources.jar"/>
      <include name="jre/lib/rt.jar"/>
    </fileset>
  </path>
  
  <property name="project.jdk.home" value="${jdk.home.jdk_8}"/>
  <property name="project.jdk.bin" value="${jdk.bin.jdk_8}"/>
  <property name="project.jdk.classpath" value="jdk.classpath.jdk_8"/>
  <!-- Register Custom Compiler Taskdefs -->
  <property name="javac2.home" value="${ide.home}/lib"/>
  <path id="javac2.classpath">
    <fileset dir="${javac2.home}">
      <include name="javac2.jar"/>
      <include name="jdom.jar"/>
      <include name="asm-all*.jar"/>
      <include name="forms-*.jar"/>
    </fileset>
  </path>
  <target name="register.custom.compilers">
    <taskdef name="javac2" classname="com.intellij.ant.Javac2" classpathref="javac2.classpath"/>
    <taskdef name="instrumentIdeaExtensions" classname="com.intellij.ant.InstrumentIdeaExtensions" classpathref="javac2.classpath"/>
  </target>
  
  <!-- Modules -->
  
  
  <!-- Module joy -->
  
  <dirname property="module.joy.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.joy" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.joy" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.joy" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.joy" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  
  <property name="joy.output.dir" value="${module.joy.basedir}/joy/bin"/>
  <property name="joy.testoutput.dir" value="${module.joy.basedir}/joy/bin"/>
  
  <path id="joy.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="joy.module.production.classpath">
    <path refid="${module.jdk.classpath.joy}"/>
  </path>
  
  <path id="joy.runtime.production.module.classpath">
    <pathelement location="${joy.output.dir}"/>
  </path>
  
  <path id="joy.module.classpath">
    <pathelement location="${joy.output.dir}"/>
    <path refid="${module.jdk.classpath.joy}"/>
  </path>
  
  <path id="joy.runtime.module.classpath">
    <pathelement location="${joy.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.joy">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.joy">
    <patternset refid="excluded.from.module.joy"/>
  </patternset>
  
  <path id="joy.module.sourcepath">
    <dirset dir="${module.joy.basedir}/joy">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.joy" depends="compile.module.joy.production,compile.module.joy.tests" description="Compile module joy"/>
  
  <target name="compile.module.joy.production" depends="register.custom.compilers" description="Compile module joy; production classes">
    <mkdir dir="${joy.output.dir}"/>
    <javac2 destdir="${joy.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.joy}/javac">
      <compilerarg line="${compiler.args.joy}"/>
      <bootclasspath refid="joy.module.bootclasspath"/>
      <classpath refid="joy.module.production.classpath"/>
      <src refid="joy.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.joy"/>
    </javac2>
    
    <copy todir="${joy.output.dir}">
      <fileset dir="${module.joy.basedir}/joy/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.joy.tests" depends="register.custom.compilers,compile.module.joy.production" description="compile module joy; test classes" unless="skip.tests"/>
  
  <target name="clean.module.joy" description="cleanup module">
    <delete dir="${joy.output.dir}"/>
    <delete dir="${joy.testoutput.dir}"/>
  </target>
  
  
  <!-- Module joyLinux -->
  
  <dirname property="module.joylinux.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.joylinux" value=""/>
  <property name="module.jdk.bin.joylinux" value=""/>
  <property name="module.jdk.classpath.joylinux" value=""/>
  
  <property name="compiler.args.joylinux" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  
  <property name="joylinux.output.dir" value="${module.joylinux.basedir}/joyLinux/bin"/>
  <property name="joylinux.testoutput.dir" value="${module.joylinux.basedir}/joyLinux/bin"/>
  
  <path id="joylinux.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="joylinux.module.production.classpath"/>
  
  <path id="joylinux.runtime.production.module.classpath">
    <pathelement location="${joylinux.output.dir}"/>
  </path>
  
  <path id="joylinux.module.classpath">
    <pathelement location="${joylinux.output.dir}"/>
  </path>
  
  <path id="joylinux.runtime.module.classpath">
    <pathelement location="${joylinux.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.joylinux">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.joylinux">
    <patternset refid="excluded.from.module.joylinux"/>
  </patternset>
  
  
  <target name="compile.module.joylinux" depends="compile.module.joylinux.production,compile.module.joylinux.tests" description="Compile module joyLinux"/>
  
  <target name="compile.module.joylinux.production" depends="register.custom.compilers" description="Compile module joyLinux; production classes"/>
  
  <target name="compile.module.joylinux.tests" depends="register.custom.compilers,compile.module.joylinux.production" description="compile module joyLinux; test classes" unless="skip.tests"/>
  
  <target name="clean.module.joylinux" description="cleanup module">
    <delete dir="${joylinux.output.dir}"/>
    <delete dir="${joylinux.testoutput.dir}"/>
  </target>
  
  
  <!-- Module joyWindows -->
  
  <dirname property="module.joywindows.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.joywindows" value=""/>
  <property name="module.jdk.bin.joywindows" value=""/>
  <property name="module.jdk.classpath.joywindows" value=""/>
  
  <property name="compiler.args.joywindows" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  
  <property name="joywindows.output.dir" value="${module.joywindows.basedir}/joyWindows/bin"/>
  <property name="joywindows.testoutput.dir" value="${module.joywindows.basedir}/joyWindows/bin"/>
  
  <path id="joywindows.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="joywindows.module.production.classpath"/>
  
  <path id="joywindows.runtime.production.module.classpath">
    <pathelement location="${joywindows.output.dir}"/>
  </path>
  
  <path id="joywindows.module.classpath">
    <pathelement location="${joywindows.output.dir}"/>
  </path>
  
  <path id="joywindows.runtime.module.classpath">
    <pathelement location="${joywindows.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.joywindows">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.joywindows">
    <patternset refid="excluded.from.module.joywindows"/>
  </patternset>
  
  
  <target name="compile.module.joywindows" depends="compile.module.joywindows.production,compile.module.joywindows.tests" description="Compile module joyWindows"/>
  
  <target name="compile.module.joywindows.production" depends="register.custom.compilers" description="Compile module joyWindows; production classes"/>
  
  <target name="compile.module.joywindows.tests" depends="register.custom.compilers,compile.module.joywindows.production" description="compile module joyWindows; test classes" unless="skip.tests"/>
  
  <target name="clean.module.joywindows" description="cleanup module">
    <delete dir="${joywindows.output.dir}"/>
    <delete dir="${joywindows.testoutput.dir}"/>
  </target>
  
  
  <!-- Module javatari -->
  
  <dirname property="module.javatari.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.javatari" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.javatari" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.javatari" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.javatari" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  
  <property name="javatari.output.dir" value="${module.javatari.basedir}/javatari/bin"/>
  <property name="javatari.testoutput.dir" value="${module.javatari.basedir}/javatari/bin"/>
  
  <path id="javatari.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="javatari.module.production.classpath">
    <path refid="${module.jdk.classpath.javatari}"/>
    <pathelement location="${joy.output.dir}"/>
  </path>
  
  <path id="javatari.runtime.production.module.classpath">
    <pathelement location="${javatari.output.dir}"/>
    <path refid="joy.runtime.production.module.classpath"/>
  </path>
  
  <path id="javatari.module.classpath">
    <pathelement location="${javatari.output.dir}"/>
    <path refid="${module.jdk.classpath.javatari}"/>
    <pathelement location="${joy.output.dir}"/>
  </path>
  
  <path id="javatari.runtime.module.classpath">
    <pathelement location="${javatari.output.dir}"/>
    <path refid="joy.runtime.module.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.javatari">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.javatari">
    <patternset refid="excluded.from.module.javatari"/>
  </patternset>
  
  <path id="javatari.module.sourcepath">
    <dirset dir="${module.javatari.basedir}/javatari">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.javatari" depends="compile.module.javatari.production,compile.module.javatari.tests" description="Compile module javatari"/>
  
  <target name="compile.module.javatari.production" depends="register.custom.compilers,compile.module.joy" description="Compile module javatari; production classes">
    <mkdir dir="${javatari.output.dir}"/>
    <javac2 destdir="${javatari.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.javatari}/javac">
      <compilerarg line="${compiler.args.javatari}"/>
      <bootclasspath refid="javatari.module.bootclasspath"/>
      <classpath refid="javatari.module.production.classpath"/>
      <src refid="javatari.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.javatari"/>
    </javac2>
    
    <copy todir="${javatari.output.dir}">
      <fileset dir="${module.javatari.basedir}/javatari/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.javatari.tests" depends="register.custom.compilers,compile.module.javatari.production" description="compile module javatari; test classes" unless="skip.tests"/>
  
  <target name="clean.module.javatari" description="cleanup module">
    <delete dir="${javatari.output.dir}"/>
    <delete dir="${javatari.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.joy, clean.module.joylinux, clean.module.joywindows, clean.module.javatari" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.joy, compile.module.joylinux, compile.module.joywindows, compile.module.javatari" description="build all modules"/>
  
  <target name="all" depends="build.modules" description="build all"/>
</project>